// Generated by CoffeeScript 1.8.0
(function() {
  var $, Backbone, UpdatingCollectionView, async, helpers, init, _,
    __slice = [].slice;

  Backbone = require('backbone4000');

  helpers = require('helpers');

  async = require('async');

  _ = window._ = require('underscore');

  $ = require('jquery-browserify');

  UpdatingCollectionView = Backbone.View.extend({
    initialize: function(options) {
      _.extend(this, options);
      if (!this._childViewConstructor) {
        throw "need child view constructor";
      }
      if (!this._childViewTagName) {
        throw "need child view tag name";
      }
      this._childViews = [];
      this.collection.each((function(_this) {
        return function(model) {
          return _this.addChild(model);
        };
      })(this));
      this.listenTo(this.collection, 'add', (function(_this) {
        return function(model) {
          return _this.addChild(model);
        };
      })(this));
      return this.listenTo(this.collection, 'remove', (function(_this) {
        return function(model) {
          return _this.removeChild(model);
        };
      })(this));
    },
    appendAnim: function(root, child, callback) {
      root.append(child);
      return helpers.cbc(callback);
    },
    removeAnim: function(child, callback) {
      return child.fadeOut(helpers.cb(callback));
    },
    addChild: function(model) {
      var childView;
      childView = new this._childViewConstructor({
        tagName: this._childViewTagName,
        model: model
      });
      this._childViews.push(childView);
      if (this._rendered) {
        if (this._childViews.length === 1) {
          this.removeAnim(this.$el.children());
        }
        return this.appendAnim(this.$el, childView.render().$el);
      }
    },
    removeChild: function(model) {
      var viewToRemove;
      viewToRemove = _.first(_.filter(this._childViews, function(view) {
        return view.model === model;
      }));
      this._childViews = _.without(this._childViews, viewToRemove);
      if (this._rendered) {
        return this.removeAnim(viewToRemove.$el, function() {
          return viewToRemove.remove();
        });
      }
    },
    render: function() {
      this._rendered = true;
      if (this._childViews.length) {
        this.$el.empty();
      }
      _.each(this._childViews, (function(_this) {
        return function(view) {
          view.render();
          return _this.$el.append(view.$el);
        };
      })(this));
      return this;
    }
  });

  init = exports.init = function(env, callback) {
    var defineView;
    exports.defineView = defineView = function() {
      var classes, name, options, renders, viewTemplate;
      name = arguments[0], options = arguments[1], classes = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (options.template) {
        viewTemplate = {
          template: options.template,
          render: function() {
            var rendering;
            if (this.template.constructor === Function) {
              rendering = this.template(_.extend({
                env: env,
                helpers: helpers,
                h: helpers,
                _: _
              }, this.model.attributes));
            } else {
              rendering = this.template;
            }
            this.$el.html(rendering);
            return this;
          },
          initialize: function(initoptions) {
            this.initoptions = initoptions != null ? initoptions : {};
            if (!options.nohook) {
              if (this.model.refresh) {
                this.listenTo(this.model, 'anychange', (function(_this) {
                  return function() {
                    return _this.render();
                  };
                })(this));
              } else {
                this.listenTo(this.model, 'change', (function(_this) {
                  return function() {
                    return _this.render();
                  };
                })(this));
              }
              return this.listenTo(this.model, 'resolve', (function(_this) {
                return function() {
                  return _this.render();
                };
              })(this));
            }
          }
        };
        classes = [viewTemplate].concat(classes);
      }
      if (exports[name]) {
        classes.unshift(exports[name].prototype);
      }
      renders = _.pluck(_.reject(classes, function(c) {
        return !c.render;
      }), 'render');
      if (renders.length > 1) {
        classes.push({
          render: _.compose.apply(_, renders.reverse())
        });
      }
      return exports[name] = Backbone.View.extend4000.apply(Backbone.View, classes);
    };
    defineView("main", {
      template: require('./ejs/main.ejs'),
      nohook: true
    }, {
      render: function() {
        this.collectionView = new UpdatingCollectionView({
          collection: this.model,
          _childViewTagName: 'div',
          _childViewConstructor: exports.presenceEntry,
          appendAnim: function(root, child, callback) {
            child.hide();
            root.prepend(child);
            return child.fadeIn('fast', callback);
          },
          el: this.$('.collection')
        });
        console.log('new mapview');
        this.mapView = new exports.map({
          el: this.$('.map'),
          model: this.model
        });
        this.mapView.render();
        return this.collectionView.render();
      }
    });
    defineView("map", {
      template: "",
      nohook: true
    }, {
      render: function() {
        var arcs, bubbles;
        this.$el.height($(window).height());
        Datamap;
        window.map = this.map = new Datamap({
          element: this.el,
          responsive: true,
          fills: {
            defaultFill: "#2C2C43",
            red: 'red'
          },
          fillOpacity: 0.5,
          geographyConfig: {
            hideAntarctica: true,
            borderWidth: 1,
            borderColor: "#585886"
          },
          arcConfig: {
            strokeColor: '#00ff00',
            strokeWidth: 1,
            arcSharpness: 1,
            animationSpeed: 600
          }
        });
        arcs = [];
        bubbles = [];
        env.trace = (function(_this) {
          return function(host) {
            var oldloc;
            oldloc = void 0;
            return env.lweb.query({
              trace: host
            }, function(msg) {
              var arc, bubble, options;
              if (!(msg != null ? msg.loc : void 0)) {
                return;
              }
              bubble = {
                name: "ip: " + msg.ip + "<br>hostname: " + msg.hostname + "<br>city: " + msg.city,
                radius: 5,
                yeild: 15000,
                fillKey: 'red',
                borderWidth: 1,
                borderColor: 'rgba(0,255,0,1)',
                popupOnHover: true,
                fillOpacity: 0,
                highlightOnHover: true,
                highlightFillColor: '#FC8D59',
                highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
                highlightBorderWidth: 2,
                highlightFillOpacity: 0.85
              };
              _.extend(bubble, msg.loc);
              bubbles.push(bubble);
              _this.map.bubbles(bubbles);
              if (!oldloc) {
                oldloc = msg;
                return;
              }
              options = {
                strokeWidth: 1,
                strokeColor: 'rgba(255,255,255,1)',
                greatArc: true,
                arcSharpness: 1.1
              };
              if (oldloc.vpn) {
                options.strokeColor = 'rgba(0,255,0,1)';
              }
              arcs.push(arc = {
                origin: oldloc.loc,
                destination: msg.loc,
                options: options
              });
              oldloc = msg;
              return _this.map.arc(arcs);
            });
          };
        })(this);
        window.addEventListener('resize', (function(_this) {
          return function() {
            _this.$el.height($(window).height());
            return _this.map.resize();
          };
        })(this));
        return this;
      }
    });
    defineView("presenceEntry", {
      template: require('./ejs/presenceEntry.ejs'),
      nohook: true
    }, {
      render: function() {
        return this;
      }
    });
    return callback();
  };

}).call(this);
